/* tslint:disable */
import { Injectable } from 'angular2/core';
import { Http, Response, Headers, URLSearchParams } from 'angular2/http';
import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';
import 'rxjs/Rx';


@Injectable()
/**
* Created with angular2-swagger-client-generator v{{&version}}
*/
export class ApiClientService {
domain:string;

constructor(public http: Http){
{{#swagger.x-dev-host}}
    this.domain = '{{&.}}';
{{/swagger.x-dev-host}}
{{^swagger.x-dev-host}}
    this.domain = '';
{{/swagger.x-dev-host}}
}
/*
constructor(public http: Http, options?: any) {
var domain = (typeof options === 'object') ? options.domain : options;
this.domain = typeof(domain) === 'string' ? domain : '{{&domain}}';

if(this.domain.length === 0) {
throw new Error('Domain parameter must be specified as a string.');
}

{{#isSecure}}
    this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
{{/isSecure}}
}
*/


{{#methods}}
    /**
    {{#summaryLines}}
        * {{&.}}
    {{/summaryLines}}
    *
    * @method
    * @name {{&methodName}}
    {{#parameters}}
        {{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
    {{/parameters}}
    *
    */
    public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}) {
    let payload = {};
    var queryParameters = new URLSearchParams();
    let headers = new Headers();
    headers.append('Content-Type', 'application/json');

    {{#parameters}}
        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters.append('{{&name}}',{{&singleton}});
            {{/isSingleton}}

            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                    queryParameters.append(parameterName,parameters[parameterName]);
                    }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                    if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters.append('{{&name}}',parameters['{{&camelCaseName}}']);
                    }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}

        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers.append('{{&name}}', '{{&singleton}}');
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                headers.append('{{&name}}', parameters['{{&camelCaseName}}']);
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}
        {{#isBodyParameter}}
            payload['{{&name}}'] = {{&camelCaseName}};
        {{/isBodyParameter}}
        {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isFormParameter}}
    {{/parameters}}
    let uri = `{{#swagger.basePath}}{{&.}}{{/swagger.basePath}}{{&path}}`;

    return this.http
    .{{angular2httpMethod}}(this.domain + uri{{#hasPayload}}, JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasPayload}}, { headers: headers, search: queryParameters })
    .map((res: Response) => {
    {{#hasJsonResponse}}
        let result = res.json();
    {{/hasJsonResponse}}
    {{^hasJsonResponse}}
        let result = null;

        // TODO: this method does not return JSON response, so you need to handle response by your own
    {{/hasJsonResponse}}

    return result;
    });
    }

{{/methods}}

}
